Inferring Semantic Layout for Hierarchical Text-to-Image Synthesis
Seunghoon Hong
†
Dingdong Yang
†
Jongwook Choi
†
Honglak Lee
‡,†
†University of Michigan
‡Google Brain
†{hongseu,didoyang,jwook,honglak}@umich.edu
‡honglak@google.com
Abstract
We propose a novel hierarchical approach for text-to-
image synthesis by inferring semantic layout. Instead of
learning a direct mapping from text to image, our algorithm
decomposes the generation process into multiple steps, in
which it first constructs a semantic layout from the text by
the layout generator and converts the layout to an image by
the image generator. The proposed layout generator pro-
gressively constructs a semantic layout in a coarse-to-fine
manner by generating object bounding boxes and refining
each box by estimating object shapes inside the box. The
image generator synthesizes an image conditioned on the
inferred semantic layout, which provides a useful seman-
tic structure of an image matching with the text description.
Our model not only generates semantically more meaning-
ful images, but also allows automatic annotation of gen-
erated images and user-controlled generation process by
modifying the generated scene layout. We demonstrate the
capability of the proposed model on challenging MS-COCO
dataset and show that the model can substantially improve
the image quality, interpretability of output and semantic
alignment to input text over existing approaches.
1. Introduction
Generating images from text description has been an ac-
tive research topic in computer vision. By allowing users to
describe visual concepts in natural language, it provides a
natural and flexible interface for conditioning image genera-
tion. Recently, approaches based on conditional Generative
Adversarial Network (GAN) have shown promising results
on text-to-image synthesis task [22, 36, 24]. Conditioning
both generator and discriminator on text, these approaches
are able to generate realistic images that are both diverse
and relevant to input text.
Based on conditional GAN
framework, recent approaches further improve the predic-
tion quality by generating high-resolution images [36] or
augmenting text information [6, 4].
However, the success of existing approaches has been
mainly limited to simple datasets such as birds [35] and
flowers [19], while generation of complicated, real-world
box generation
mask generation
pixel generation
real image
StackGAN [32] result
Reed et al. [19] result
Input Text : People riding on elephants that are walking through a river.
Figure 1. Overall framework of the proposed algorithm. Given a
text description, our algorithm sequentially constructs a semantic
structure of a scene and generates an image conditioned on the
inferred layout and text. Best viewed in color.
images such as MS-COCO [14] remains an open challenge.
As illustrated in Figure 1, generating image from a gen-
eral sentence "people riding on elephants that are walk-
ing through a river" requires multiple reasonings on var-
ious visual concepts, such as object category (people and
elephants), spatial configurations of objects (riding), scene
context (walking through a river), etc., which is much more
complicated than generating a single, large object as in sim-
pler datasets [35, 19]. Existing approaches have not been
successful in generating reasonable images for such com-
plex text descriptions, because of the complexity of learning
a direct text-to-pixel mapping from general images.
Instead of learning a direct mapping from text to image,
we propose an alternative approach that constructs semantic
layout as an intermediate representation between text and
image. Semantic layout defines a structure of scene based
on object instances and provides fine-grained information of
the scene, such as the number of objects, object category, lo-
cation, size, shape, etc. (Figure 1). By introducing a mech-
anism that explicitly aligns the semantic structure of an im-
age to text, the proposed method can generate complicated
images that match complex text descriptions. In addition,
conditioning the image generation on semantic structure al-
1
arXiv:1801.05091v2  [cs.CV]  26 Jul 2018
lows our model to generate semantically more meaningful
images that are easy to recognize and interpret.
Our model for hierarchical text-to-image synthesis con-
sists of two parts: the layout generator that constructs a
semantic label map from a text description, and the image
generator that converts the estimated layout to an image us-
ing the text. Since learning a direct mapping from text to
fine-grained semantic layout is still challenging, we further
decompose the task into two manageable subtasks: we first
estimate the bounding box layout of an image using the box
generator, and then refine the shape of each object inside
the box by the shape generator. The generated layout is
then used to guide the image generator for pixel-level syn-
thesis. The box generator, shape generator and image gener-
ator are implemented by independent neural networks, and
trained in parallel with corresponding supervisions.
Generating semantic layout not only improves quality of
text-to-image synthesis, but also provides a number of po-
tential benefits. First, the semantic layout provides instance-
wise annotations on generated images, which can be di-
rectly exploited for automated scene parsing and object re-
trieval. Second, it offers an interactive interface for control-
ling image generation process; users can modify the seman-
tic layout to generate a desired image by removing/adding
objects, changing size and location of objects, etc.
The contributions of this paper are as follows:
• We propose a novel approach for synthesizing images
from complicated text descriptions. Our model explic-
itly constructs semantic layout from the text descrip-
tion, and guides image generation using the inferred
semantic layout.
• By conditioning image generation on explicit layout
prediction, our method is able to generate images that
are semantically meaningful and well-aligned with in-
put descriptions.
• We conduct extensive quantitative and qualitative
evaluations on challenging MS-COCO dataset, and
demonstrate substantial improvement on generation
quality over existing works.
The rest of the paper is organized as follows. We briefly
review related work in Section 2, and provide an overview
of the proposed approach in Section 3. Our model for layout
and image generation is introduced in Section 4 and 5, re-
spectively. We discuss the experimental results on the MS-
COCO dataset in Section 6.
2. Related Work
Generating images from text descriptions has recently
drawn a lot of attention from the research community. For-
mulating the task as a conditional image generation prob-
lem, various approaches have been proposed based on Vari-
ational Auto-Encoders (VAE) [16], auto-regressive mod-
els [23], optimization techniques [18], etc. Recently, ap-
proaches based on conditional Generative Adversarial Net-
work (GAN) [7] have shown promising results in text-to-
image synthesis [22, 24, 36, 6, 4]. Reed et al. [22] proposed
to learn both generator and discriminator conditioned on
text embedding. Zhang et al. [36] improved the image qual-
ity by increasing image resolution with a two-stage GAN.
Other approaches include improving conditional genera-
tion by augmenting text data with synthesized captions [6],
or adding conditions on class labels [4]. Although these
approaches have demonstrated impressive generation re-
sults on datasets of specific categories (e.g., birds [35] and
flowers [19]), the perceptual quality of generation tends to
substantially degrade on datasets with complicated images
(e.g., MS-COCO [14]). We investigate a way to improve
text-to-image synthesis on general images, by conditioning
generation on inferred semantic layout.
The problem of generating images from pixel-wise se-
mantic labels has been explored recently [3, 10, 12, 23].
In these approaches, the task of image generation is formu-
lated as translating semantic labels to pixels. Isola et al. [10]
proposed a pixel-to-pixel translation network that converts
dense pixel-wise labels to image, and Chen et al. [3] pro-
posed a cascaded refinement network that generates high-
resolution output from dense semantic labels. Karacan et
al. [12] employed both dense layout and attribute vectors for
image generation using conditional GAN. Notably, Reed et
al. [23] utilized sparse label maps like our method. Unlike
previous approaches that require ground-truth layouts for
generation, our method infers the semantic layout, and thus
is more generally applicable to various generation tasks.
Note that our main contribution is complementary to these
approaches, and we can integrate existing segmentation-to-
pixel generation methods to generate an image conditioned
on a layout inferred by our method.
The idea of inferring scene structure for image gener-
ation is not new, as it has been explored by some recent
works in several domains. For example, Wang et al. [34]
proposed to infer a surface normal map as an intermediate
structure to generate indoor scene images, and Villegas et
al. [31] predicted human joints for future frame prediction.
The most relevant work to our method is Reed et al. [24],
which predicted local key-points of bird or human for text-
to-image synthesis. Contrary to the previous approaches
that predict such specific types of structure for image gen-
eration, our proposed method aims to predict semantic label
maps, which is a general representation of natural images.
3. Overview
The overall pipeline of the proposed framework is illus-
trated in Figure 2. Given a text description, our model pro-
gressively constructs a scene by refining semantic structure
of an image using the following sequence of generators:
Box Generator (§4.1)
People riding on elephants that 
are walking through a river.
BiLSTM
M1
M2
· · ·
s
p(Bt|B1:t−1)
MT
elephant
B1:T
LSTM
elephant
person
chair
Shape Generator (§4.2)
Text Encoding
Image Generator (§5)
M
s
B1:T
Figure 2. Overall pipeline of the proposed algorithm. Given a text embedding, our algorithm first generates a coarse layout of the image by
placing a set of object bounding boxes using the box generator (Section 4.1), and further refines the object shape inside each box using the
shape generator (Section 4.2). Combining outputs from the box and the shape generator leads to a semantic label map defining semantic
structure of the scene. Conditioned on the inferred semantic layout and the text, a pixel-wise image is finally generated by the image
generator (Section 5).
• Box generator takes a text embedding s as input,
and generates a coarse layout by composing object in-
stances in an image. The output of the box generator is
a set of bounding boxes B1:T = {B1, ..., BT }, where
each bounding box Bt defines the location, size and
category label of the t-th object (Section 4.1).
• Shape generator takes a set of bounding boxes gen-
erated from box generator, and predicts shapes of the
object inside the boxes. The output of the shape gen-
erator is a set of binary masks M1:T = {M1, ..., MT },
where each mask Mt defines the foreground shape of
the t-th object (Section 4.2).
• Image generator takes the semantic label map M ob-
tained by aggregating instance-wise masks, and the
text embedding as inputs, and generates an image by
translating a semantic layout to pixels matching the
text description (Section 5).
By conditioning the image generation process on the se-
mantic layouts that are explicitly inferred, our method is
able to generate images that preserve detailed object shapes
and therefore are easier to recognize semantic contents. In
our experiments, we show that the images generated by our
method are semantically more meaningful and well-aligned
with the input text, compared to ones generated by previous
approaches [22, 36] (Section 6).
4. Inferring Semantic Layout from Text
4.1. Bounding Box Generation
Given an input text embedding s, we first generate a
coarse layout of image in the form of object bounding
boxes. We associate each bounding box Bt with a class
label to define which class of object to place and where,
which plays a critical role in determining the global layout
of the scene. Specifically, we denote the labeled bound-
ing box of the t-th object as Bt = (bt, lt), where bt =
[bt,x, bt,y, bt,w, bt,h] ∈ R4 represents the location and size
of the bounding box, and lt ∈ {0, 1}L+1 is a one-hot class
label over L categories. We reserve the (L + 1)-th class as
a special indicator for the end-of-sequence.
The box generator Gbox defines a stochastic mapping
from the input text s to a set of T object bounding boxes
B1:T = {B1, ..., BT }:
�B1:T ∼ Gbox(s).
(1)
Model.
We employ an auto-regressive decoder for the box
generator, by decomposing the conditional joint bounding
box probability as p(B1:T | s) = �T
t=1 p(Bt | B1:t−1, s),
where the conditionals are approximated by LSTM [9]. In
the generative process, we first sample a class label lt for the
t-th object and then generate the box coordinates bt condi-
tioned on lt, i.e., p(Bt|·) = p(bt, lt|·) = p(lt|·) p(bt|lt, ·).
The two conditionals are modeled by a Gaussian Mixture
Model (GMM) and a categorical distribution [8], respec-
tively:
p(lt | B1:t−1, s) = Softmax(et),
(2)
p(bt | lt, B1:t−1, s) =
K
�
k=1
πt,k N
�
bt; µt,k, Σt,k
�
,
(3)
where K is the number of mixture components. The soft-
max logit et in Eq.(2) and the parameters for the Gaussian
mixtures πt,k ∈ R, µt,k ∈ R4 and Σt,k ∈ R4×4 in Eq.(3)
are computed by the outputs from each LSTM step t. Please
see Section A.1 in the appendix for details.
Training.
We train the box generator by minimizing the
negative log-likelihood of ground-truth bounding boxes:
Lbox = −λl
1
T
T
�
t=1
l∗
t log p(lt) − λb
1
T
T
�
t=1
log p(b∗
t ), (4)
where T is the number of objects in an image, and λl, λb
are balancing hyper-parameters, which are set to 4 and 1
in our experiment, respectively. b∗
t and l∗
t are ground-truth
bounding box coordinates and label of the t-th object, re-
spectively, which are ordered based on their bounding box
locations from left to right. Note that we drop the condi-
tioning in Eq. (4) for notational brevity.
At test time, we generate bounding boxes via ancestral
sampling of box coordinates and class label by Eq. (2) and
(3), respectively. We terminate the sampling when the sam-
pled class label corresponds to the termination indicator
(L + 1), thus the number of objects are determined adap-
tively based on the text.
4.2. Shape Generation
Given a set of bounding boxes obtained by the box gen-
erator, the shape generator predicts more detailed image
structure in the form of object masks.
Specifically, for
each object bounding box Bt obtained by Eq. (1), we gen-
erate a binary mask Mt ∈ RH×W that defines the shape
of the object inside the box. To this end, we first convert
the discrete bounding box outputs {Bt} to a binary tensor
Bt ∈ {0, 1}H×W ×L, whose element is 1 if and only if it
is contained in the corresponding class-labeled box. Using
the notation M1:T = {M1, ..., MT }, we define the shape
generator Gmask as
�
M1:T = Gmask(B1:T , z1:T ),
(5)
where zt ∼ N(0, I) is a random noise vector.
Generating an accurate object shape should meet two re-
quirements: (i) First, each instance-wise mask Mt should
match the location and class information of Bt, and be
recognizable as an individual instance (instance-wise con-
straints). (ii) Second, each object shape must be aligned
with its surrounding context (global constraints). To satisfy
both, we design the shape generator as a recurrent neural
network, which is trained with two conditional adversarial
losses as described below.
Model.
We build the shape generator Gmask using a con-
volutional recurrent neural network [26], as illustrated in
Figure 2. At each step t, the model takes Bt through en-
coder CNN, and encodes information of all object instances
by bi-directional convolutional LSTM (Bi-convLSTM). On
top of convLSTM output at t-th step, we add noise zt by
spatial tiling and concatenation, and generate a mask Mt by
forwarding it through a decoder CNN.
Training.
Training of the shape generator is based on the
GAN framework [7], in which generator and discriminator
are alternately trained. To enforce both the global and the
instance-wise constraints discussed earlier, we employ two
conditional adversarial losses [17] with the instance-wise
discriminator Dinst and the global discriminator Dglobal.
First, we encourage each object mask to be compati-
ble with class and location information encoded by object
bounding box. We train an instance-wise discriminator Dinst
by optimizing the following instance-wise adversarial loss:
L(t)
inst = E(Bt,Mt)
�
log Dinst
�
Bt, Mt
��
(6)
+ EBt,zt
�
log
�
1 − Dinst
�
Bt, G(t)
mask(B1:T , z1:T )
���
,
where G(t)
mask(B1:T , z1:T ) indicates the t-th output from
mask generator. The instance-wise loss is applied for each
of T instance-wise masks, and aggregated over all instances
as Linst = (1/T) �
t L(t)
inst.
On the other hand, the global loss encourages all the
instance-wise masks form a globally coherent context.
To consider relation between different objects, we ag-
gregate them into a global mask1 Gglobal(B1:T , z1:T ) =
�
t G(t)
mask(B1:t, z1:t), and compute an global adversarial
loss analogous to Eq. (6) as
Lglobal = E(B1:T ,M1:T )
�
log Dglobal
�
Bglobal, Mglobal
��
(7)
+ EB1:T ,z1:T
�
log
�
1 − Dglobal
�
Bglobal, Gglobal(B1:T , z1:T )
���
,
where Mglobal ∈ RH×W is an aggregated mask obtained
by taking element-wise addition over M1:T , and Bglobal ∈
RH×W ×L is an aggregated bounding box tensor obtained
by taking element-wise maximum over B1:T .
Finally, we additionally impose a reconstruction loss Lrec
that encourages the predicted instance masks to be similar to
the ground-truths. We implement this idea using perceptual
loss [11, 3, 33, 2], which measures the distance of real and
fake images in the feature space of a pre-trained CNN by
Lrec =
�
l
��Φl(Gglobal) − Φl(Mglobal)
��,
(8)
where Φl is the feature extracted from the l-th layer of a
CNN. We use the VGG-19 network [27] pre-trained on Im-
ageNet [5] in our experiments. Since our input to the pre-
trained network is a binary mask, we replicate masks to
channel dimension and use the converted mask to compute
Eq. (8). We found that using the perceptual loss signifi-
cantly improves stability of GAN training and the quality
of object shapes, as discussed in [3, 33, 2].
Combining Eq.(6), (7) and (8), the overall training ob-
jective for the shape generator becomes
Lshape = λiLinst + λgLglobal + λrLrec,
(9)
where λi, λg and λr are hyper-parameters that balance dif-
ferent losses, which are set to 1, 1 and 10 in the experiment,
respectively. We provide more details of training and net-
work architecture in the appendix (Section A.2).
1Gglobal is computed by addition to model overlap between objects.
128
128
{0, 1}
People riding elephants
in a body of water.
Generator Network
Spatial
Tiling
z ∼ N(0, 1)
128
L
Residual Blocks
down-sample
concatenation
Cascaded
Decoder Network
128
People riding elephants 
in a body of water.
Discriminator Network
M
M
FC
FC
A
FC
●
FC
s
s
S
Ag
h × w × d
h
w
h0
w0
σ
down-sample
X
X
Figure 3. Architecture of the image generator. Conditioned on the text description and the semantic layout generated by the layout generator,
it generates an image that matches both inputs.
5. Synthesizing Images from Text and Layout
The outputs from the layout generator define location,
size, shape and class information of objects, which provide
semantic structure of a scene relevant to text. Given the
semantic structure and text, the objective of the image gen-
erator is to generate an image that conforms to both condi-
tions. To this end, we first aggregate binary object masks
M1:T to a semantic label map M ∈ {0, 1}H×W ×L, such
that Mijk = 1 if and only if there exists an object of class
k whose mask Mt covers the pixel (i, j). Then, given the
semantic layout M and the text s, the image generator is
defined by
�
X = Gimg(M, s, z),
(10)
where z ∼ N(0, I) is a random noise. In the following, we
describe the network architecture and training procedures
of the image generator.
Model.
Figure 3 illustrates the overall architecture of the
image generator. Our generator network is based on a con-
volutional encoder-decoder network [10] with several mod-
ifications. It first encodes the semantic layout M through
several down-sampling layers to construct a layout feature
A ∈ Rh×w×d.
We consider that the layout feature en-
codes various context information of the input layout along
the channel dimension. To adaptively select a context rel-
evant to the text, we apply attention on the layout fea-
ture. Specifically, we compute a d-dimensional vector from
the text embedding, and spatially replicate it to construct
S ∈ Rh×w×d. Then we apply gating on the layout feature
by Ag = A ⊙ σ(S), where σ is the sigmoid nonlinear-
ity, and ⊙ denotes element-wise multiplication. To further
encode text information on background, we compute an-
other text embedding with separate fully-connected layers
and spatially replicate it to size h × w. The gated layout
feature Ag, the text embedding and noises are then com-
bined by concatenation along channel dimension, and sub-
sequently fed into several residual blocks and decoder to be
mapped to an image. We employ a cascaded network [3]
for decoder, which takes the semantic layout M as an addi-
tional input to every upsampling layer. We found that cas-
caded network enhances conditioning on layout structure
and produces better object boundary.
For the discriminator network Dimg, we first concatenate
the generated image X and the semantic layout M. It is
fed through a series of down-sampling blocks, resulting in
a feature map of size h′ × w′. We concatenate it with a
spatially tiled text embedding, from which we compute a
decision score of the discriminator.
Training.
Conditioned on both the semantic layout M
and the text embedding s, the image generator Gimg is
jointly trained with the discriminator Dimg. We define the
objective function by Limg = λaLadv + λrLrec, where
Ladv = E(M,s,X)
�
log Dimg
�
M, s, X
��
(11)
+ E(M,s),z
�
log
�
1 − Dimg
�
M, s, Gimg(M, s, z)
���
,
Lrec =
�
l
∥Φl(Gimg(M, s, z)) − Φl(X)∥,
(12)
where X is a ground-truth image associated with semantic
layout M. As in the mask generator, we apply the same
perceptual loss Lrec, which is found to be effective. We set
the hyper-parameters λa = 1, λr = 10 in our experiment.
More details on network architecture and training procedure
is provided in appendix (Section A.3).
6. Experiments
6.1. Experimental Setup
Dataset.
We use the MS-COCO dataset [14] to evalu-
ate our model. It contains 164,000 training images over
80 semantic classes, where each image is associated with
instance-wise annotations (i.e., object bounding boxes and
segmentation masks) and 5 text descriptions. The dataset
has complex scenes with many objects in a diverse context,
which makes generation very challenging. We use the of-
ficial train and validation splits from MS-COCO 2014 for
training and evaluating our model, respectively.
Evaluation metrics.
We evaluate text-conditional image
generation performance using various metrics: Inception
score, caption generation, and human evaluation.
Caption generation
Inception
[25]
Method
Box
Mask
BLEU-1
BLEU-2
BLEU-3
BLEU-4
METEOR
CIDEr
Reed et al. [22]
-
-
0.470
0.253
0.136
0.077
0.122
0.160
7.88 ± 0.07
StackGAN [36]
-
-
0.492
0.272
0.152
0.089
0.128
0.195
8.45 ± 0.03
Ours
Pred.
Pred.
0.541
0.332
0.199
0.122
0.154
0.367
11.46 ± 0.09
Ours (control experiment)
GT
Pred.
0.556
0.353
0.219
0.139
0.162
0.400
11.94 ± 0.09
GT
GT
0.573
0.373
0.239
0.156
0.169
0.440
12.40 ± 0.08
Real images (upper bound)
-
-
0.678
0.496
0.349
0.243
0.228
0.802
-
Table 1. Quantitative evaluation results. Two evaluation metrics based on caption generation and the Inception score are presented. The
second and third columns indicate types of bounding box or mask layout used in image generation, where "GT" indicates ground-truth and
"Pred." indicates predicted one by our model. The last row presents the caption generation performance on real images, which corresponds
to upper-bound of caption generation metric. Higher is better in all columns.
Ground
Truth
(GT) A kid in wet-
suit on surfboard
in the ocean.
generated image and caption
StackGAN
256x256
a person flying a
kite on a beach .
Reed et al.
64x64
a man is flying a
kite in the sky
Ours
128x128
a man is surfing in
the ocean with a
surfboard .
(GT) a lady that is
on some skies on
some snow
generated image and caption
a man is walking
on a beach with a
surfboard .
a person is riding
a snowboard on a
snowy slope .
a man is skiing
down a hill with a
snowboard .
(GT)
A
young
man playing fris-
bee while people
watch.
generated image and caption
a man is standing
next to a cow .
a group of people
standing around a
field with kites .
a man is playing
with a frisbee in a
field .
(GT) A bus that
is sitting in the
street.
generated image and caption
a city street with a
traffic light and a
green light .
a large boat is in
the water near a
city .
a red and white bus
parked on a city
street .
Figure 4. Qualitative examples of generated images conditioned on text descriptions on the MS-COCO validation set, using our method
and baselines (StackGAN [36] and Reed et al. [22]). The input text and ground-truth image are shown in the first row. For each method,
we provide a reconstructed caption conditioned on the generated image.
Method
ratio of
ranking 1st
vs. Ours
StackGAN [36]
18.4 %
29.5 %
Reed et al. [22]
23.3 %
32.3 %
Ours
58.3 %
-
Table 2. Human evaluation results.
Inception score — We compute the Inception score [25]
by applying pre-trained classifier on synthesized images
and investigating statistics of their score distributions. It
measures recognizability and diversity of generated images,
and has been known to be correlated with human percep-
tions on visual quality [20]. We use the Inception-v3 [28]
network pre-trained on ImageNet [5] for evaluation, and
measure the score for all validation images.
Caption generation — In addition to the Inception score,
assessing performance of text-conditional image generation
necessitates measuring the relevance of generated image to
the input text. To this end, we generate sentences from the
synthesized image and measure the similarity between in-
put text and predicted sentence. The underlying intuition is
that if the generated image is relevant to input text and its
contents are recognizable, one should be able to guess the
original text from the synthesized image. We employ an im-
age caption generator [32] trained on MS-COCO to gener-
ate sentences, where one sentence is generated per image by
greedy decoding. We report three standard language simi-
larity metrics: BLEU [21], METEOR [1] and CIDEr [30].
Human evaluation — Evaluation based on caption gen-
eration is beneficial for large-scale evaluation but may in-
troduce unintended bias by the caption generator. To verify
the effectiveness of caption-based evaluation, we conduct
human evaluation using Amazon Mechanical Turk.
For
each text randomly selected from MS-COCO validation set,
we presented 5 images generated by different methods, and
asked users to rank the methods based on the relevance of
generated images to text. We collected results for 1000 sen-
tences, each of which is annotated by 5 users. We report
results based on the ratio of each method ranked as the best,
and one-to-one comparison between ours and the baselines.
6.2. Quantitative Analysis
We compare our method with two state-of-the-art ap-
proaches [22, 36] based on conditional GANs. Table 1 and
Table 2 summarizes the quantitative evaluation results.
Comparisons to other methods.
We first present sys-
temic evaluation results based on Inception score and cap-
tion generation performance. The results are summarized
(a) Predict box&mask
(b) Use GT box, predict mask
(c) Use GT box&mask
input caption
real image
boxes
mask
pixel
boxes
mask
pixel
boxes
mask
pixel
A group of people fly
kites into the air on a
large grassy field.
A
tower
towering
above
a
small
city
under a blue sky.
a bench in the woods
covered in snow
this is two people ski-
ing down a hill
A rusted pink fire hy-
drant in the grass
A large cow walks over
a fox in the grass.
A laptop computer sit-
ting on a desk next to a
desktop monitor.
Figure 5. Image generation results of our method. Each column corresponds to generation results conditioned on (a) predicted box and
mask layout, (b) ground-truth box and predicted mask layout and (c) ground-truth box and mask layout. Classes are color-coded for
illustration purpose. See Figure 11 for more examples on the generated layouts and images. Best viewed in color.
in Table 1. The proposed method substantially outperforms
existing approaches based on both evaluation metrics. In
terms of Inception score, our method outperforms the ex-
isting approaches with a substantial margin, presumably
because our method generates more recognizable objects.
Caption generation performance shows that captions gener-
ated from our synthesized images are more strongly corre-
lated with the input text than the baselines. This shows that
images generated by our method are better aligned with de-
scriptions and are easier to recognize semantic contents.
Table 2 summarizes comparison results based on human
evaluation. When users are asked to rank images based on
their relevance to input text, they choose images generated
by our method as the best in about 60% of all presented sen-
tences, which is substantially higher than baselines (about
20%). This is consistent with the caption generation results
in Table 1, in which our method substantially outperforms
the baselines while their performances are comparable.
Figure 4 illustrates qualitative comparisons. Due to ad-
versarial training, images generated by the other methods,
especially StackGAN [36], tend to be clear and exhibits
high frequency details. However, it is difficult to recognize
contents from the images, since they often fail to predict
Input Text: A man is jumping and throwing a frisbee
Input Text: two skiers on a big snowy hill in the woods
Input Text: A man flying a kite at the beach while several people walk by
Figure 6. Multiple samples generated from a text description. See
Figure 12 for more results.
important semantic structure of object and scene. As a re-
sult, the reconstructed captions from the generated images
are usually not relevant to the input text. Compared to them,
our method generates much more recognizable and seman-
tically meaningful images by conditioning the generation
with inferred semantic layout, and is able to reconstruct de-
scriptions that better align with the input sentences.
A zebra stands 
in the snow
A zebra stands 
in a forest
A zebra stands 
on grass 
covered field
A zebra 
stands in the 
desert
A zebra 
stands on 
dried filed
A giraffe
stands on grass 
covered field
A horse stands 
on grass 
covered field
An elephant
stands on grass 
covered field
A person
stands on grass 
covered field
A truck sits on 
grass covered 
field
A large herd of 
sheep grazing 
on grass 
covered field
Three sheep
grazing on 
grass covered 
field
Two sheep 
grazing on 
the grass 
covered field
A person 
riding on a 
horse on grass 
covered field
A person next 
to a horse on 
grass covered 
field
Figure 7. Generation results by manipulating captions. The manip-
ulated parts of texts are highlighted in bold characters, where the
types of manipulation is indicated by different colors. Blue: scene
context, Magenta: spatial location, Red: the number of objects,
Green: object category.
Ablative Analysis.
To understand quality and the im-
pact of the predicted semantic layout, we conduct an ab-
lation study by gradually replacing the bounding box and
mask layout predicted by layout generator with the ground-
truths. Table 1 summarizes quantitative evaluation results.
As it shows, replacing the predicted layouts to ground-
truths leads with gradual performance improvements, which
shows predictions errors in both bounding box and mask
layout.
6.3. Qualitative Analysis
Figure 5 shows qualitative results of our method. For
each text, we present the generated images alongside the
predicted semantic layouts. As in the previous section, we
also present our results conditioned on ground-truth layouts.
As it shows, our method generates reasonable semantic lay-
out and image matching the input text; it generates bound-
ing boxes corresponding to fine-grained scene structure im-
plied in texts (i.e. object categories, the number of objects),
and object masks capturing class-specific visual attributes
as well as relation to other objects. Given the inferred lay-
outs, our image generator produces correct object appear-
ances and background compatible with text. Replacing the
predicted layouts with ground-truths makes the generated
images to have a similar context to original images.
Diversity of samples.
To assess the diversity in genera-
tion, we sample multiple images while fixing the input text.
Figure 6 illustrates the example images generated by our
method. Our method generates diverse semantic structures
Box Layout
Generated Image
Input text: a group of people standing in the snow and holding skis
(a) Generation results by adding new objects.
Box Layout
Generated Image
Input Text: A baseball player holding a bat over his head
(b) Generation results by changing spatial configuration of objects.
Figure 8. Examples of controllable image generation. See Fig-
ure 13 and 14 for more results.
given the same text description, while preserving semantic
details such as the number of objects and object categories.
Text-conditional generation.
To see how our model in-
corporates text description in generation process, we gener-
ate images while modifying parts of the descriptions. Fig-
ure 7 illustrates the example results. When we change the
context of descriptions such as object class, number of ob-
jects, spatial composition of objects and background pat-
terns, our method correctly adapts semantic structure and
images based on the modified part of the text.
Controllable image generation.
We demonstrate con-
trollable image generation by modifying bounding box lay-
out. Figure 8 illustrates the example results. Our method
updates object shapes and context based on the modified
semantic layout (e.g. adding new objects, changing spatial
configuration of objects) and generates reasonable images.
See Figure 13 and 14 for more examples on various types
of layout modifications.
7. Conclusion
We proposed an approach for text-to-image synthesis
which explicitly infers and exploits a semantic layout as an
intermediate representation from text to image. Our model
hierarchically constructs a semantic layout in a coarse-to-
fine manner by a series of generators. By conditioning im-
age generation on explicit layout prediction, our method
generates complicated images that preserve semantic details
and highly relevant to the text description. We also showed
that the predicted layout can be used to control generation
process. We believe that end-to-end training of layout and
image generation would be an interesting future work.
Acknowledgments
This work was supported in part by
ONR N00014-13-1-0762, NSF CAREER IIS-1453651,
DARPA Explainable AI (XAI) program #313498, and
Sloan Research Fellowship.
References
[1] S. Banerjee and A. Lavie. METEOR: An Automatic Metric
for MT Evaluation with Improved Correlation with Human
Judgments. In ACL, 2005. 6
[2] M. Cha, Y. Gwon, and H. T. Kung. Adversarial nets with
perceptual losses for text-to-image synthesis. arXiv preprint
arXiv:1708.09321, 2017. 4
[3] Q. Chen and V. Koltun. Photographic image synthesis with
cascaded refinement networks. In ICCV, 2017. 2, 4, 5, 10
[4] A. Dash, J. C. B. Gamboa, S. Ahmed, M. Z. Afzal,
and M. Liwicki.
TAC-GAN-Text Conditioned Auxiliary
Classifier Generative Adversarial Network. arXiv preprint
arXiv:1703.06412, 2017. 1, 2
[5] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. Imagenet: A large-scale hierarchical image database. In
CVPR, 2009. 4, 6
[6] H. Dong, J. Zhang, D. McIlwraith, and Y. Guo. I2t2i: Learn-
ing text to image synthesis with textual data augmentation.
ICIP, 2017. 1, 2
[7] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative Adversarial Networks. In NIPS, 2014. 2, 4
[8] D. Ha and D. Eck. A Neural Representation of Sketch Draw-
ings. arXiv preprint arXiv:1704.03477, 2017. 3
[9] S. Hochreiter and J. Schmidhuber. Long short-term memory.
Neural computation, 1997. 3
[10] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
translation with conditional adversarial networks. In CVPR,
2017. 2, 5
[11] J. Johnson, A. Alahi, and L. Fei-Fei. Perceptual Losses for
Real-Time Style Transfer and Super-Resolution. In ECCV,
2016. 4
[12] L. Karacan, Z. Akata, A. Erdem, and E. Erdem. Learning
to generate images of outdoor scenes from attributes and se-
mantic layouts. CoRR, 2016. 2
[13] D. Kingma and J. Ba. Adam: A method for stochastic opti-
mization. arXiv preprint arXiv:1412.6980, 2014. 10, 12
[14] T.-Y. Lin, M. Maire, S. Belongie, L. Bourdev, R. Girshick,
J. Hays, P. Perona, D. Ramanan, C. . L. Zitnick, and P. Doll´ar.
Microsoft COCO: Common Objects in Context. In ECCV,
2014. 1, 2, 5
[15] A. L. Maas, A. Y. Hannun, and A. Y. Ng. Rectifier nonlin-
earities improve neural network acoustic models. In ICML
Workshop on Deep Learning for Audio, Speech and Lan-
guage Processing, 2013. 10
[16] E. Mansimov, E. Parisotto, and J. Ba. Generating images
from captions with attention. In ICLR, 2016. 2
[17] M. Mirza and S. Osindero. Conditional generative adversar-
ial nets. arXiv preprint arXiv:1411.1784, 2014. 4
[18] A. Nguyen, J. Yosinski, Y. Bengio, A. Dosovitskiy, and
J. Clune. Plug & play generative networks: Conditional iter-
ative generation of images in latent space. In CVPR, 2017.
2
[19] M.-E. Nilsback and A. Zisserman. Automated flower classi-
fication over a large number of classes. In Proceedings of the
Indian Conference on Computer Vision, Graphics and Image
Processing, Dec 2008. 1, 2
[20] A. Odena, C. Olah, and J. Shlens. Conditional Image Syn-
thesis with Auxiliary Classifier GANs. In ICML, 2017. 6
[21] K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. BLEU: A
Method for Automatic Evaluation of Machine Translation.
In ACL, 2002. 6
[22] S. Reed, Z. Akata, X. Yan, L. Logeswaran, B. Schiele, and
H. Lee. Generative adversarial text to image synthesis. In
ICML, 2016. 1, 2, 3, 6, 10
[23] S. Reed, A. Oord, N. Kalchbrenner, S. G´omez, Z. Wang,
D. Belov, and N. Freitas. Parallel multiscale autoregressive
density estimation. In ICML, 2017. 2
[24] S. E. Reed, Z. Akata, S. Mohan, S. Tenka, B. Schiele, and
H. Lee. Learning what and where to draw. In NIPS, 2016. 1,
2
[25] T. Salimans, I. Goodfellow, W. Zaremba, V. Cheung, A. Rad-
ford, and X. Chen. Improved Techniques for Training GANs.
In NIPS, 2016. 6
[26] X. Shi, Z. Chen, H. Wang, D. Yeung, W. Wong, and W. Woo.
Convolutional LSTM Network: A Machine Learning Ap-
proach for Precipitation Nowcasting. In NIPS, 2015. 4
[27] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In ICLR, 2015.
4
[28] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna.
Rethinking the inception architecture for computer vision. In
CVPR, 2016. 6
[29] D. Ulyanov, A. Vedaldi, and V. S. Lempitsky. Instance nor-
malization: The missing ingredient for fast stylization. arXiv
preprint arXiv:1607.08022, 2016. 10
[30] R. Vedantam, C. L. Zitnick, and D. Parikh.
CIDEr:
Consensus-based Image Description Evaluation. In CVPR,
2015. 6
[31] R. Villegas, J. Yang, Y. Zou, S. Sohn, X. Lin, and H. Lee.
Learning to generate long-term future via hierarchical pre-
diction. In ICML, 2017. 2
[32] O. Vinyals, A. Toshev, S. Bengio, and D. Erhan. Show and
tell: A neural image caption generator. In CVPR, 2015. 6
[33] C. Wang, C. Xu, C. Wang, and D. Too. Perceptual adversarial
networks for image-to-image transformation. arXiv preprint
arXiv:1706.09138, 2017. 4
[34] X. Wang and A. Gupta. Generative image modeling using
style and structure adversarial networks. In ECCV, 2016. 2
[35] P. Welinder, S. Branson, T. Mita, C. Wah, F. Schroff, S. Be-
longie, and P. Perona. Caltech-UCSD Birds 200. Technical
Report CNS-TR-2010-001, California Institute of Technol-
ogy, 2010. 1, 2
[36] H. Zhang, T. Xu, H. Li, S. Zhang, X. Wang, X. Huang, and
D. Metaxas. StackGAN: Text to Photo-realistic Image Syn-
thesis with Stacked Generative Adversarial Networks.
In
ICCV, 2017. 1, 2, 3, 6, 7
Appendix
A. Implementation Details
A.1. Box Generator
This section describes the details of the box gener-
ator.
Denoting bounding box of t-th object as Bt
=
(bx
t , by
t , bw
t , bh
t , lt), the joint probability of sampling Bt
from the box generator is given by
p(bx
t , by
t , bw
t , bh
t , lt) = p(lt)p(bx
t , by
t , bw
t , bh
t |lt).
(13)
We drop the conditioning variables for notational brevity.
As described in the main paper, we implement p(lt) by
categorical distribution and p(bx
t , by
t , bw
t , bh
t |lt) by a mix-
ture of quadravariate Gaussians. However, modeling full
convariance matrix of quadravariate Gaussian is expensive
as it involves many parameters.
Therefore, we decom-
pose the box coordinate probability as p(bx
t , by
t , bw
t , bh
t |lt) =
p(bx
t , by
t |lt)p(bx
t , by
t |bw
t , bh
t , lt), and approximate it with two
bivariate Gaussian mixtures by
p(bx
t , by
t |lt) =
K
�
k=1
πxy
t,kN
�
bx
t , by
t ; µxy
t,k, Σxy
t,k
�
,
p(bw
t , bh
t |bx
t , by
t , lt) =
K
�
i=k
πwh
t,k N
�
bw
t , bh
t ; µwh
t,k , Σwh
t,k
�
.
Then the parameters for Eq. (13) are obtained from LSTM
outputs at each step by
[ht, ct] = LSTM(Bt−1; [ht−1, ct−1]),
(14)
lt = W lht + bl,
(15)
θxy
t
= W xy[ht, lt] + bxy,
(16)
θwh
t
= W wh[ht, lt, bx, by] + bwh,
(17)
where θ·
t = [π·
t,1:K, µ·
t,1:K, Σ·
t,1:K] are the parameters for
GMM concatenated to a vector.
For training, we employ an Adam optimizer [13] with
learning rate 0.001, β1 = 0.9, β2 = 0.999 and exponen-
tially decrease the learning rate with rate 0.5 at every epoch
after the initial 10 epochs.
A.2. Shape Generator
We provide a detailed architecture of the shape gener-
ator Gmask and the two discriminators Dinst and Dglobal in
Figure 9. At each step t, we encode a box tensor Bt by a
series of downsampling layers, where each downsampling
layer is implemented by a stride-2 convolution followed by
instance-wise normalization [29] and ReLU. The encoded
feature is fed into the bidirectional convolutional LSTM (bi-
convLSTM), and combined with features from all object in-
stances. On top of the bi-convLSTM output at each step t,
we add a noise zt by spatial replication and depth concate-
nation, and apply masking operation so that regions outside
the object bounding box Bt are all set to 0. The masked
feature is fed into several residual blocks, and mapped to
a binary mask Mt by a series of upsampling layers. Sim-
ilar to downsampling layers, we implement an upsampling
layer by stride-2 deconvolution followed by instance-wise
normalization and ReLU except the last one, which is 1 × 1
convolution followed by the sigmoid nonlinearity.
The instance-wise discriminator Dinst and global dis-
criminator Dglobal share the same architecture but have sep-
arate parameters. The input to the instance-wise discrimi-
nator is constructed by concatenating the box tensor Bt and
the corresponding binary mask Mt through channel dimen-
sion, while the one for global discriminator is constructed
by concatenating the aggregated box tensor Bglobal and the
aggregated masks Mglobal. Both discriminators encode the
input by a series of downsampling layers, which are imple-
mented by stride-2 convolutions followed by instance-wise
normalization and Leaky-ReLU [15].
For training, we employ an Adam optimizer [13] with
learning rate 0.0002, β1 = 0.5, β2 = 0.999 and linearly
decrease the learning rate after the first 50-epochs training.
A.3. Image Generator
A detailed architecture of the image generator is illus-
trated in Figure 10. The architecture of the downsampling
and the residual blocks are same as the ones used in the
shape generator. To encourage the model to generate im-
ages that match the input layout, we implement upsampling
layers based on cascaded refinement network [3]. At each
upsampling layer, it takes an output from the previous layer
and the semantic layout resized to the same spatial size as
inputs, and combines them by depth concatenation followed
by convolution. The combined feature map is then spatially
upscaled by bilinear upsampling followed by instance-wise
normalization and ReLU, and subsequently fed into the next
upsampling layer.
To encourage the model to generate images that match
input text descriptions, we employ a matching-aware loss
proposed in [22]. Denoting a ground-truth training example
as (M, s, X), where M, s and X denote semantic layout,
text embedding and image, respectively, we construct an ad-
ditional mismatching triple (M,�s, X) by sampling random
text embedding �s non-relevant to the image. We consider
it as additional fake examples in adversarial training, and
extend the conditional adversarial loss for image generator
(Eq. (11) in the main paper) as
Ladv = E(M,s,X)
�
log Dimg
�
M, s, X
��
(18)
+ E(M,�s,X)
�
log
�
1 − Dimg
�
M,�s, X
���
+ E(M,s),z
�
log
�
1 − Dimg
�
M, s, Gimg(M, s, z)
���
.
64
64
80
16
16
Bi-ConvLSTM
Bi-ConvLSTM
Bi-ConvLSTM
Residual	
blocks
crop
Residual	
blocks
crop
Residual	
blocks
crop
⋯
64
64
16
16
16
16
B1
B2
BT
MT
M1
M2
Generator Network
Discriminator Network
Mt
Bt
Bglobal
Mglobal
(i) Instance-wise discriminator
(ii) Global discriminator
depth concat
depth concat
{0, 1}
{0, 1}
Conv
3x3
pad 1
stride 2
InstanceNorm
+ ReLU
Deconv
4x4
pad 1
stride 2
InstanceNorm
+ ReLU
Conv
4x4
pad 1
stride 2
InstanceNorm
+ LeakyReLU
Conv
3x3
pad 1
stride 1
Conv
3x3
pad 1
stride 1
Conv
3x3
pad 1
stride 1
downsampe block in 
residual block
upsample block
downsample block in           and     
z1
Dinst
Dglobal
Gmask
Figure 9. Architecture of the shape generator.
128
128
{0, 1}
People riding elephants
in a body of water.
Generator Network
Spatial
Tiling
z ∼ N(0, 1)
128
L
Residual Blocks
down-sample
concatenation
Cascaded
Decoder Network
128
People riding elephants in 
a body of water.
Discriminator Network
M
M
FC
FC
A
FC
●
FC
s
s
S
Ag
h × w × d
σ
down-sample
X
X
Conv
3x3
pad 1
stride 2
InstanceNorm
+ ReLU
downsampe block in
Conv
4x4
pad 1
stride 2
InstanceNorm
+ LeakyReLU
downsample block in 
Conv
3x3
pad 1
stride 1
Conv
3x3
pad 1
stride 1
Conv
3x3
pad 1
stride 1
residual block
M
Conv
3x3
pad 1
stride 1
bilinear 
upsample
(x2)
concat
cascaded block
16
16
4
4
Gimg
Dimg
Figure 10. Architecture of the image generator.
We found that employing matching-aware loss substantially
improves text-conditional generation and stabilizes overall
GAN training.
For training, we employ an Adam optimizer [13] with
learning rate 0.0002, β1 = 0.5, β2 = 0.999 and linearly
decrease the learning rate after the first 30-epoch training.
B. Additional Experiment Results
B.1. Ablative Analysis
To understand the impact of each component in the pro-
posed framework, we conduct an ablation study by varying
configurations of the proposed model. Table 3 summarizes
the results based on caption generation performance.
Impact of shape generator
We first investigate the im-
pact of shape generator. To this end, we remove the shape
generator from our generation pipeline, and modify the im-
age generator to generate images directly from box gener-
ator outputs. Specifically, we feed the aggregated bound-
ing box tensor Bglobal as an input to the image generator,
which is constructed by taking pixel-wise maximum over
all box tensors as Bglobal(i, j, l) = maxt Bt(i, j, l)2. The
result is presented in the second row in Table 3. Removing
the shape generator leads to substantial performance degra-
dation, since predicting accurate object shapes and textures
directly from bounding box is a complicated task; the image
generator tends to miss detailed object shapes such as body
parts, which are critical to recognize the image content for
human. By explicitly inferring object shapes, it improves
the overall image quality and interpretability of content.
Impact of perceptual loss in shape generator
To see the
effectiveness of perceptual loss in shape generator, we train
the model after replacing the reconstruction loss in Eq. (8)
with the ℓ1 loss on pixels. The result is presented in the third
row in Table 3. As it shows, adding perceptual loss to the
shape generator improves the accuracy of object shapes and
leads to more recognizable images and improved caption
generation performance.
Impact of perceptual loss in image generator
Similar to
the previous experiment, we replaced the perceptual loss in
image generator (Eq. (12)) with the ℓ1 loss on pixels. The
fourth row in Table 3 summarizes the results. As it shows,
employing perceptual loss in the image generator critically
improves the performance by reducing visual differences
between real and synthesized images.
Impact of attention in image generator
Our image gen-
erator combines features from the text embedding s and se-
mantic layout M by attention mechanism. To see its impact
2Note that the the aggregated box tensor Bglobal can be considered as a
semantic layout M that the shape of each object is a rectangular box.
on text-conditional image generation, we remove the atten-
tion mechanism from the image generator (computation of
S and Ag in Figure 10) and concatenate the layout feature
A directly to text embedding. As shown in the last row of
Table 3, employing attention mechanism improves the text-
conditional image generation performance, since it forces
the model to exploit text information in generation process.
We found that the attention mechanism helps the model to
generate textures and background relevant to the input text.
B.2. More qualitative examples
Image and layout generation.
We present the end-to-end
image generation results of our method in Figure 11, includ-
ing object bounding boxes and masks obtained by the layout
generator. As illustrated in the figure, our model generates
object bounding boxes that match content of the input text,
and shapes capturing class-specific visual attributes and re-
lation with other objects (e.g. person riding a motorcycle,
person swinging a bat, etc). Given the layout, the image
generator correctly predicts object textures and background
match the description.
Diversity of samples.
Figure 12 presents a set of samples
generated by our method, which corresponds to Figure 6 in
the main paper. Our method generates diverse samples by
generating semantic layouts that are both diverse and highly
related to the input text description.
Controllable image generation.
Semantic layout pro-
vides a natural and interactive interface for image editing.
By modifying the bounding box layout of the scene, our
model can generate the object shapes and images compati-
ble with the modified layout. Figure 13 illustrates the gener-
ated images obtained by adding new objects to the existing
semantic layout. By placing new object bounding boxes to
a scene, our model not only creates the corresponding ob-
ject instance but also modifies surrounding context adaptive
to the change. For instance, adding cars and pedestrians in
front of a tower makes the model to generate a street on a
background (the 4th row in Figure 13). Similarly, one can
modify the semantic layout by changing size and spatial lo-
cation of existing objects. Figure 14 illustrates the results.
Modifying the spatial configuration of objects sometimes
changes the relationship between objects and leads to im-
ages in different context. For instance, changing the loca-
tions of a soccer ball and players leads to various images
such as dribbling, shooting and competing to occupy the
ball (the first row in Figure 14).
Caption generation
Method
BLEU-1
BLEU-2
BLEU-3
BLEU-4
METEOR
CIDEr
Ours (Full)
0.541
0.332
0.199
0.122
0.154
0.367
w/o shape generator
0.494
0.291
0.170
0.102
0.131
0.215
w/o perceptual loss in shape generator
0.536
0.329
0.196
0.119
0.151
0.324
w/o perceptual loss in image generator
0.491
0.272
0.146
0.080
0.126
0.170
w/o attention in image generator
0.522
0.315
0.184
0.112
0.148
0.324
Table 3. Ablation study of the proposed method. The first row corresponds to the performance of our model presented in the main paper.
input caption
real image
boxes
mask
pixel
two surfers walk across the
beach towards the ocean.
An
Aer
Lingus
plane
touches
down
on
an
airport runway.
A crowd of people stand-
ing on cement ground fly-
ing kites.
A skier stands next to skis
stuck into the snow.
A person is shown riding
a bicycle down the side of
the road.
A zebra standing on top of
a lush green field.
A man wearing a black
water suit surfs through
the water
A Chicago logo boat is
traveling in the water.
A man holding a baseball
bat on a field.
A group of people fly kites
into the air on a large
grassy field.
The dinner plate has as-
paragus, carrots and some
kind of meat.
input caption
real image
boxes
mask
pixel
A bird flying through
a blue sky with wide
wings.
A man wearing a black
suit and pink bow tie.
A man standing out-
doors next to a dirt bike
and ATV.
A red fire hydrant sit-
ting in a parking lot
next to a metal post.
A train moving on the
tracks in treed area.
a number of people
playing frisbee indoors
An elephant stands in
front of a watering hole
in his habitat.
A skateboarder in the
middle of a trick on a
concrete rail.
A man is playing tennis
in front of steps
a bench in the woods
covered in snow
A blue and white dou-
ble decker bus next to a
barrier.
Figure 11. Illustrations of end-to-end prediction results of our method. Best viewed in color.
Input Text: A group of men playing soccer in a park
Input Text: A man taking a swing at a baseball
Input Text: Elephants walking along a dirt path next to water
Input Text: two pizzas on plates on a dining table with a pink design table cloth
Input Text:  A woman working on something hanging from the ceiling in a computer room
Input Text: A fire hydrant covered with snow in the snow
Input Text: an image of people riding elephants in the water
Input Text: A baby elephant following its parent through a field
Input Text: A clock tower is raised in front of a blue sky
Input Text: A man riding a skateboard down a sidewalk
Input Text: a couple of giraffes are standing on a trail
Input Text: a couple of buses drive next to each other
Input Text: The boat is in a body of water that is not clear
Input Text: a plate of rice and broccoli with meat
Input Text: A zebra standing on the fields  looking up and howling
Input Text: A blue plate holding food that includes shrimp, fries and greens
Figure 12. Examples of multiple samples generated from a text description.
Box Layout
Generated Image
Input Text: two pizzas on plates on a dining table with a pink design table cloth.
.
.
Box Layout
Generated Image
Input Text: A baseball player taking a swing at a ball.
.
Box Layout
Generated Image
Input Text: A cat sits on a desk in front of a computer.
Box Layout
Generated Image
Input Text: A very tall clock tower with clocks on every side.
Box Layout
Generated Image
Input Text: Waterway will all kinds of boats moored and docked.
.
Figure 13. Examples of controllable image generation by adding
new objects.
Box Layout
Generated Image
Input Text: Two men who are standing in the grass near a soccer ball
Box Layout
Generated Image
Input Text: A person riding on top of a surfboard on water
Box Layout
Generated Image
Input Text: A black and white dog laying on top of a field of grass
Box Layout
Generated Image
Input Text: A dog playing with a calf in the grass.
Box Layout
Generated Image
Input Text: A man wearing skis holding two ski poles.
Figure 14. Examples of controllable image generation by modify-
ing the size and locations of object bounding boxes.
